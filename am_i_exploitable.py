"""
Support for os, importlib, argparse and other modules which written for avoiding repetitive code.
"""
import os
import importlib
import argparse
from modules import constants, run_command

MENU_MESSAGE = '''The 'Am I Exploitable?' CVEs database:
Remote Code Execution (RCE):
Ghost - CVE-2015-0235
GhostCat - CVE-2020-1938
CVE-2021-3711
CVE-2021-41773
CVE-2021-42013
Spring4Shell - CVE-2022-22965
Log4Shell - CVE-2021-44228, CVE-2021-45046, CVE-2021-4104, CVE-2021-45105, CVE-2021-44832, CVE-2021-42013
ShellShock - CVE-2014-6271, CVE-2014-6277, CVE-2014-6278, CVE-2014-7169, CVE-2014-7186, CVE-2014-7187

Privilege Escalation (PLE):
Heartbleed - CVE-2014-0160
Dirty_COW - CVE-2016-5195
Huge_Dirty_COW - CVE-2017-1000405
PWNKIT - CVE-20214034
Dirty_Pipe - CVE-2022-0847
CVE-2022-25636
NimbusPWN - CVE-2022-29799, CVE-2022-29800
Meltdown - CVE-2017-5754
Spectre - CVE-2017-5715, CVE-2017-5753, CVE-2017-5754

Run options:
all - runs checks for all the CVEs in the database
CVE-YYYY-XXXX - run specific vulnerability check by inserting its CVE id 
name - run specific vulnerability check by inserting its name (for example - Log4Shell)
'''
ALL = 'all'


def run_cve_check(vulnerability_identifier, description, graph, debug, container_name):
    """This function run the cve file that matches the entered vulnerability name."""
    vulnerability_path = f'cves.{vulnerability_identifier}'
    vulnerability_validation = importlib.import_module(vulnerability_path)
    vulnerability_validation.main(description, graph, debug, container_name)


def run(vulnerability_identifier, description, graph, debug, container_name):
    """This function checks if the cve_id that received has a file with its name."""
    cve_dir_path = f"{os.getcwd()}/cves"
    cve_validation_files = os.listdir(cve_dir_path)
    cves_files = [f.split('.')[constants.START] for f in cve_validation_files]
    if vulnerability_identifier in cves_files:
        run_cve_check(vulnerability_identifier, description, graph, debug, container_name)
    else:
        print(constants.FULL_EXPLANATION_MESSAGE.format('Vulnerability name does not match the CVEs files'))


def fix_cve_format(vulnerability_identifier):
    """This function fixes the cve format so all cases will be included."""
    vulnerability_identifier = vulnerability_identifier.lower()
    if vulnerability_identifier.startswith('cve') and '-' in vulnerability_identifier:
        vulnerability_identifier = vulnerability_identifier.replace('-', '_')
    return vulnerability_identifier


def checks_cve_id_parameter(vulnerability_identifier, description, debug, graph, container_name):
    """This function run the next function according to the cve_id parameter."""
    fixed_cve = fix_cve_format(vulnerability_identifier)
    if fixed_cve == ALL:
        for vulnerability in constants.ALL_VULNERABILITIES:
            run(vulnerability, description, graph, debug, container_name)
    elif fixed_cve in constants.ALL_VULNERABILITIES:
        run(fixed_cve, description, graph, debug, container_name)
    elif fixed_cve in constants.DUPLICATE_VULNERABILITIES_NAMES:
        run(constants.DUPLICATE_VULNERABILITIES_NAMES[fixed_cve], description, graph, debug, container_name)
    elif fixed_cve == 'spectre':
        for spectre_cve in constants.SPECTRE:
            run(spectre_cve, description, graph, debug, container_name)
    elif not vulnerability_identifier:
        print(constants.FULL_EXPLANATION_MESSAGE.format(MENU_MESSAGE))
        print(constants.FULL_EXPLANATION_MESSAGE.format('Enter one of the running options in order to be scanned'))
    else:
        print(constants.FULL_EXPLANATION_MESSAGE.format('The vulnerability name does not exists in the database'))


def check_parameter_value(args):
    if not (args.description.lower() == 'true' or args.description.lower() == 'false'):
        print(constants.FULL_EXPLANATION_MESSAGE.format('Description value can be set to True or False only'))
        return False
    if not (args.graph.lower() == 'true' or args.graph.lower() == 'false'):
        print(constants.FULL_EXPLANATION_MESSAGE.format('Graph value can be set to True or False only'))
        return False
    if not (args.debug.lower() == 'true' or args.debug.lower() == 'false'):
        print(constants.FULL_EXPLANATION_MESSAGE.format('Debug value can be set to True or False only'))
        return False
    if not (args.container.lower() == 'true' or args.container.lower() == 'false'):
        print(constants.FULL_EXPLANATION_MESSAGE.format('Container value can be set to True or False only'))
        return False
    return True


def arguments():
    """This function sets the arguments."""
    parser = argparse.ArgumentParser(description="'AM I Exploitable?' is a service that let's you validate "
                                                 "whether or not your system is susceptible to a given CVE")
    parser.add_argument('--vulnerability_identifier', type=str, default='', help='Enter vulnerability identifier '
                                                                                 'according to the following format:\n'
                                                                                 '`CVE-<YEAR>-<NUMBER>`\nVulnerability '
                                                                                 'name (if exists in db)\n`all` - scan '
                                                                                 'your system for all the '
                                                                                 'vulnerabilities in the cves directory'
                                                                                 '\nIf the argument is not set, a menu '
                                                                                 'message will appear presenting the '
                                                                                 'currently supported vulnerabilities'
                                                                                 '\n')
    parser.add_argument('--description', type=bool, default=True, help='A description of the vulnerability '
                                                                       '(True by default)')
    parser.add_argument('--graph', type=bool, default=False, help='Graph which presents the security checks of the '
                                                                  'vulnerability')
    parser.add_argument('--debug', type=bool, default=False, help='An option to debug the program and see errors')
    parser.add_argument('--container', type=bool, default=False, help='Specify if you run in container mode or not')
    return parser.parse_args()


def set_argparse_parameters():
    args = arguments()
    if check_parameter_value(args):
        if str(args.description).lower() == 'true':
            args.description = True
        else:
            args.description = False
        if str(args.graph).lower() == 'true':
            args.graph = True
        else:
            args.graph = False
        if str(args.debug).lower() == 'true':
            args.debug = True
        else:
            args.debug = False
        if str(args.container).lower() == 'true':
            args.container = True
        else:
            args.container = False
        return args
    else:
        return ''


def main():
    """This is the main function."""
    args = set_argparse_parameters()
    if args:
        if args.container:
            container_names = []
            docker_ps_command = 'sudo docker ps -f status=running'
            pipe_docker_ps = run_command.command_output(docker_ps_command, args.debug, container_name='')
            docker_ps = pipe_docker_ps.stdout
            if docker_ps:
                for field in docker_ps.split('\n')[constants.FIRST:constants.END]:
                    container_names.append(field.split(' ')[constants.END])
                if container_names:
                    for container_name in container_names:
                        print(f'\nScanning vulnerabilities on {container_name} container')
                        checks_cve_id_parameter(args.vulnerability_identifier, args.description, args.debug, args.graph,
                                                container_name)
                else:
                    print(constants.FULL_EXPLANATION_MESSAGE.format('Docker containers were not found, unsupported '
                                                                    'value'))
            else:
                print(constants.FULL_EXPLANATION_MESSAGE.format('Docker containers were not found, unsupported value'))
        else:
            checks_cve_id_parameter(args.vulnerability_identifier, args.description, args.debug, args.graph,
                                    container_name='')


if __name__ == '__main__':
    print("Welcome to Rezilion's 'Am I Exploitable?' Service")
    main()
